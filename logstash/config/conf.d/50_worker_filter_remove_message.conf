# this filter removes message field in case that it's properly parsed  
filter {
	if [Country] != "US" {
        	# add field with message size
        	ruby {
        		code => "event.set('Message_Size', event.get('message').bytesize)"
        	}
        	mutate {
        		convert => { "Message_Size" => "integer" }
        	}
	}
	if "_grokparsefailure" not in [tags] {
		mutate {
			remove_field => [ "message" ]
		}
	}
	
	# uppercase ENV and Country
	mutate {
		uppercase => [ "Environment" ]
		uppercase => [ "Country" ]
		uppercase => [ "Severity" ]
	}
	
	# if field LogMessage is present, trucate it to 1024B
	# only logstash 5.X+
	if [Country] == "KZ" {
		# check that LogMessage field is present
		if ("" in [LogMessage]) {
			ruby {
				code => 'event.set("LogMessage",event.get("LogMessage")[0..10240]+" ... Truncated by logstsash (10kiB)") if event.get("LogMessage").bytesize > 10240'
			}
		}
	}
	# dropping debug messages
	if [Country] == "KZ" {
        	if [Severity] == "DEBUG" or [Severity] == "TRACE"{
        		drop { }
        	}
	}
	
	# syslog - host is IP - use Hostname tag
	if [type] == "syslog" {
		mutate {
			rename => ["Hostname", "Unix_Hostname"]
		}
	} else {
		# Change host to Unix_Hostname for all messages
		mutate {
			rename => [ "host", "Unix_Hostname" ]
			rename => [ "[beat][hostname]", "Unix_Hostname" ]
			rename => [ "source", "path" ]
		}
	}
	
	# extract EnvName from hostname
	grok {
		match => { "Unix_Hostname" => "%{DATA}-%{GREEDYDATA:EnvName}" }
	}
	
	mutate {
		remove_field => [ "beat","offset","input_type", "host"]
	}
	
	mutate {
		#gsub => [ "request.uri", "[0-9]{4,}", "#" ]
		gsub => [ "request.uri", "limit", "limit2" ]
		add_tag => ["replaced"]
	}
}
