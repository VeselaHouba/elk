filter {
	if [type] == "hsapp" {
		if "processed" in [tags] {
			# skip messages which are already parsed
			mutate {
				add_tag => [ "agent_processed" ]
			}
		} else {
			if "blaze" in [tags] {
				# blaze
				grok {
					match => { "message" => "%{BLAZEAPP}"}
					patterns_dir => ["./patterns"]
					add_tag => ["processed"]
				}
			} else if "openapi" in [tags] {
				# openapi
				grok {
					match => { "message" => "%{OPENAPI}"}
					patterns_dir => ["./patterns"]
					add_tag => ["processed"]
				}
			} else if "kong" in [tags] {
				if "json" in [tags] {
					json {source => "message"}
				} else {
					grok {
						match => { "message" => "%{KONG_ACCESS}"}
						patterns_dir => ["./patterns"]
						add_tag => ["processed"]
					}
			  	}
			}
			if [Country] == "CN" or [Country] == "DEV" {
				# switch sequence for parsing - homer
				if "processed" not in [tags] {
						grok {
							match => { "message" => "%{HSAPP2}"}
							patterns_dir => ["./patterns"]
							add_tag => ["processed", "HSAPP2"]
						}
					}
				if "processed" not in [tags] {
					grok {
						match => { "message" => "%{HSAPP1}"}
						patterns_dir => ["./patterns"]
						remove_tag => ["_grokparsefailure"]
						add_tag => ["processed", "HSAPP1"]
					}
				}
				if "processed" not in [tags] {
					grok {
						match => { "message" => "%{HSAPP3}"}
						patterns_dir => ["./patterns"]
						remove_tag => ["_grokparsefailure"]
						add_tag => ["processed","HSAPP3"]
					}
				}
			} else {
				# hosel
				#Below is defined log filtering for hosel apps
				if "processed" not in [tags] {
					grok {
						match => { "message" => "%{HOSELAPP}"}
						patterns_dir => ["./patterns"]
						add_tag => ["processed", "HOSELAPP"]
					}
				}
				if "processed" not in [tags] {
					grok {
						match => { "message" => "%{HSAPP1}"}
						patterns_dir => ["./patterns"]
						remove_tag => ["_grokparsefailure"]
						add_tag => ["processed", "HSAPP1"]
					}
				}
				if "processed" not in [tags] {
					grok {
						match => { "message" => "%{HSAPP2}"}
						patterns_dir => ["./patterns"]
						remove_tag => ["_grokparsefailure"]
						add_tag => ["processed", "HSAPP2"]
					}
				}
				if "processed" not in [tags] {
					grok {
						match => { "message" => "%{HSAPP3}"}
						patterns_dir => ["./patterns"]
						remove_tag => ["_grokparsefailure"]
						add_tag => ["processed","HSAPP3"]
					}
				}
				
				# try to extract some extra fields from message body
				if "processed" in [tags] and [Class]== "jdbc.sqltiming" {
					grok {
						match => { "LogMessage" => "%{APP_EXECUTED_TIME}" }
						patterns_dir => ["./patterns"]
					}
					# no match? No problem
					if "_grokparsefailure" in [tags] {
						mutate {
							remove_tag => ["_grokparsefailure"]
						}
					}
				}
				# try to extract some extra fields from message body
				if "processed" in [tags] {
					grok {
						match => { "LogMessage" => "%{NSINFO}" }
						patterns_dir => ["./patterns"]
					}
					# no match? No problem
					if "_grokparsefailure" in [tags] {
						mutate {
							remove_tag => ["_grokparsefailure"]
						}
					}
				}
			}
			############## END OF PARSING ################
			# we have to change behaviour for blaze time parsing
			if "blaze" not in [tags] {
				# regular homer/hosel logs
				if [Country] == "CN" or [Country] == "DEV" {
					date {
						# Adjusting delay between deliver row to server
						match => ["Timestamp", "YYYY-MM-dd HH:mm:ss,SSS"]
						timezone => "Asia/Hong_Kong"
					}
				} else if [Country] == "US" {
					date {
						match => ["Timestamp", "YYYY-MM-dd HH:mm:ss,SSS"]
						timezone => "America/Chicago"
					}
				} else if [Country] == "KZ" {
					date {
						match => ["Timestamp", "YYYY-MM-dd HH:mm:ss,SSS"]
						timezone => "Asia/Almaty"
					}
				} else if [Country] == "VN" {
				date {
					match => ["Timestamp", "YYYY-MM-dd HH:mm:ss,SSS", "YYYY-MM-dd HH:mm:ss", "dd/MMM/yyyy:HH:mm:ss' +0700'"]
					timezone => "Asia/Ho_Chi_Minh"
				}
			}
			} else if "blaze" in [tags] {
				# Ugly hack to add missing date to blaze logs (contains only time)
				# this will only work on logs created the same day as read
				ruby {
					#code => "event['logdate']=Time.now.strftime('%Y-%m-%d')"
					code => "event.set('logdate',Time.now.strftime('%Y-%m-%d'))"
				}
				mutate {
					# merge with existing time field
					add_field => {"Timestamp2" => "%{logdate}_%{Timestamp}"}
				}
				if [Country] == "US" {
					date {
						match => ["Timestamp2", "YYYY-MM-dd_HH:mm:ss.SSS"]
						timezone => "America/Chicago"
						remove_field => ["Timestamp2"]
					}
				} else if [Country] == "CN" or [Country] == "DEV" {
					date {
						match => ["Timestamp2", "YYYY-MM-dd_HH:mm:ss.SSS"]
						timezone => "Asia/Hong_Kong"
						remove_field => ["Timestamp2","logdate"]
					}
				}
			}
			# dropping debug messages
	#		if [Severity] == "DEBUG" or [Severity] == "TRACE"{
	#			drop { }
	#		}
		}
	}
}

