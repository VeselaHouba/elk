input {
	#TODO : SPLITTING BY HOST IS NOT WORKING, BECAUSE WE DON'T KNOW HOST YET (it's message field) -> useless
	if [host] =~ /\.prod\.itc\.homecredit\.cn/ {
		redis {
			host		=> "scnvx040.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osbtrace"
		}
		redis {
			host		=> "scnvx040.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osblog"
		}
		redis {
			host		=> "scnvx041.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osbtrace"
		}
		redis {
			host		=> "scnvx041.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osblog"
		}
		redis {
			host		=> "scnvx042.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osbtrace"
		}
		redis {
			host		=> "scnvx042.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osblog"
		}
		redis {
			host		=> "scnvx043.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osbtrace"
		}
		redis {
			host		=> "scnvx043.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osblog"
		}
		redis {
			host		=> "scnvx044.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osbtrace"
		}
		redis {
			host		=> "scnvx044.prod.itc.homecredit.cn"
			port		=> 6379
			data_type	=> "list"
			key		=> "osblog"
		}
	}
	else {
        	#Below are defined inputs from redis for osb logs
        	redis {
        		host	  => "localhost"
        		port	  => 6379
        		data_type => "list"
        		key	   => "osbtrace"
        	}
        	redis {
        		host	  => "localhost"
        		port	  => 6379
        		data_type => "list"
        		key	   => "osblog"
        	}
	}
}
filter {
	if [type] == "osblog" {
		mutate {
			add_tag => [ "%{type}","v1.4" ]
		}
		if [Country] == "US" or [Country] == "DEV" {
        		# try to process long pattern with trace. 
        		# If not working, try short pattern 
        		if "processed" not in [tags] {
        			grok {
        				patterns_dir => "./patterns"
        				match => { "message" => "(?m)%{OSBLOG02}" }
        				add_tag => ["processed", "OSBLOG02"]
        			}
        		}
        		if "processed" not in [tags] {
        			grok {
        				patterns_dir => "./patterns"
        				match => { "message" => "(?m)%{OSBLOG01}" }
        				remove_tag => ["_grokparsefailure"]
        				add_tag => ["processed", "OSBLOG01"]
        			}
        		}
        		if "processed" not in [tags] {
        			grok {
        				patterns_dir => "./patterns"
        				match => { "message" => "(?m)%{OSB_SPLIT_LOG}" }
        				remove_tag => ["_grokparsefailure"]
        				add_tag => ["processed", "OSB_SPLIT_LOG"]
        			}
        		}
		
			if "split" in [tags] {
        			date {
        				match => ["Osb_Timestamp2",
        					"YYYY-MM-dd HH:mm:ss.SSS'-0500 CDT'",
        					"YYYY-MM-dd HH:mm:ss.SSS'-0600 CST'"
        				]
        				timezone => "America/Chicago"
        			}
        		}
			if "split" not in [tags] {
				date {
					match => ["Osb_Timestamp",
						"ISO8601"
					]
					timezone => "America/Chicago"
				}
			}
		} else if [Country] == "CN" {
			# CN LEGACY - patterns will be merged after upgrade of logging class
			if "processed" not in [tags] {
				grok {
					patterns_dir => "./patterns"
					match => { "message" => "(?m)%{OSB_SRV_LOG}" }
					add_tag => ["processed", "OSB_SRV_LOG"]
				}
			}
			date {
				match => ["Osb_Timestamp",
					"EEE MMM dd H:mm:ss 'CST' yyyy"
				]
				timezone => "Asia/Hong_Kong"
			}
		} 

		# pattern was not working, send message as-is
		if ("_grokparsefailure" in [tags]) {
			grok {
				match => { "message" => "(?m)%{GREEDYDATA:Osb_MessageText}" }
			}
		}
	}
	
########################################################################################################################
# OSB TRACE
########################################################################################################################  
	#Below is defined log filtering for osb logs
	if [type] == "osbtrace" {
		#Below is defined log filtering for OSB log
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSBDIAG_SPLIT1}" }
				add_tag => ["processed", "OSBDIAG_SPLIT1"]
			}
		}
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSBDIAG_SPLIT2}" }
				remove_tag => ["_grokparsefailure"]
				add_tag => ["processed", "OSBDIAG_SPLIT2"]
			}
		}
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSBDIAG2}" }
				remove_tag => ["_grokparsefailure"]
				add_tag => ["processed", "OSBDIAG2"]
			}
		}
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSBDIAG1}" }
				remove_tag => ["_grokparsefailure"]
				add_tag => ["processed", "OSBDIAG1"]
			}
		}
		if "OSBDIAG2" in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "Osb_Trace" => "(?m)%{OSB_TRACE}" }
			}
		}
		mutate {
			add_tag => [ "%{type}" ]
		}
		# CN not tested yet
  		if [Country] == "CN" {
			date {
				match => ["Osb_Timestamp",
					"EEE MMM dd H:mm:ss 'CST' yyyy"
				]
				timezone => "Asia/Hong_Kong"
			}
		} 
		else if [Country] == "US" {
			if "split" in [tags] {
				date {
        				match => ["Osb_Timestamp2",
        					"YYYY-MM-dd HH:mm:ss.SSS'-0500 CDT'",
        					"YYYY-MM-dd HH:mm:ss.SSS'-0600 CST'"
        				]
        				timezone => "America/Chicago"
        			}
			} 
			else {
        			date {
        				match => ["Osb_Timestamp",
        					"ISO8601"
        				]
        				timezone => "America/Chicago"
        			}
			}
		}
		else if [Country] == "DEV" {
			if "split" in [tags] {
        			date {
        				match => ["Osb_Timestamp2",
        					"YYYY-MM-dd HH:mm:ss.SSS'+0600 ALMT'"
        				]
        				timezone => "Asia/Almaty"
        			}
        		}
		}
		if ("_grokparsefailure" in [tags]) {
			grok {
				match => { "message" => "(?m)%{GREEDYDATA:Osb_MessageText}" }
			}
		}
	}
}
