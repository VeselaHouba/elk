input {
	#Below are defined inputs from redis for osb logs
	redis {
		host	  => "localhost"
		port	  => 6379
		data_type => "list"
		key	   => "osbtrace"
	}
	redis {
		host	  => "localhost"
		port	  => 6379
		data_type => "list"
		key	   => "osblog"
	}
}
filter {
	if [type] == "osblog" {
		mutate {
			add_tag => [ "%{type}","v_1.2" ]
		}
		# try to process long pattern with trace. 
		# If not working, try short pattern 
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSBLOG02}" }
	            add_tag => ["processed", "OSBLOG02"]
			}
		}
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSBLOG01}" }
				remove_tag => ["_grokparsefailure"]
	            add_tag => ["processed", "OSBLOG01"]
			}
		}
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSB_SPLIT_LOG}" }
				remove_tag => ["_grokparsefailure"]
	            add_tag => ["processed", "OSB_SPLIT_LOG"]
			}
		}
		
		if [Country] == "US" or [Country] == "DEV" {
			if "split" in [tags] {
        			date {
        				match => ["Osb_Timestamp2",
        					"YYYY-MM-dd HH:mm:ss.SSS'-0500 CDT'",
        					"YYYY-MM-dd HH:mm:ss.SSS'-0600 CST'"
        				]
        				timezone => "America/Chicago"
        			}
        		}
			if "split" not in [tags] {
				date {
					match => ["Osb_Timestamp",
						"ISO8601"
					]
					timezone => "America/Chicago"
				}
			}
		}

		# pattern was not working, send message as-is
		if ("_grokparsefailure" in [tags]) {
			grok {
				match => { "message" => "(?m)%{GREEDYDATA:Osb_MessageText}" }
			}
		}
	}
	
########################################################################################################################
# OSB TRACE
########################################################################################################################  
	#Below is defined log filtering for osb logs
	if [type] == "osbtrace" {
		#Below is defined log filtering for OSB log
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSBDIAG2}" }
				add_tag => ["processed", "OSBDIAG2"]
			}
		}
		if "processed" not in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "(?m)%{OSBDIAG1}" }
				remove_tag => ["_grokparsefailure"]
				add_tag => ["processed", "OSBDIAG1"]
			}
		}
		if "OSBDIAG2" in [tags] {
			grok {
				patterns_dir => "./patterns"
				match => { "Osb_Trace" => "(?m)%{OSB_TRACE}" }
			}
		}
#		xml {
#			source => "Osb_XML01"
#			target => "Osb_XML01_parsed"
#		}
#		xml {
#			source => "Osb_XML02"
#			target => "Osb_XML02_parsed"
#		}
#		xml {
#			source => "Osb_XML02"
#			xpath => [ "/soapenv:Envelope/soapenv:Body/chec:checkFinancialProductEligibilityRequest/chec:itemList/chec:itemInfo/chec:additionalOutOfPocketAmnout/text()", "Osb_Xpath01" ]
#		}
#		mutate {
#			remove_field => [ "Osb_XML01","Osb_XML02" ]
#		}
		mutate {
			add_tag => [ "%{type}" ]
		}
		# CN not tested yet
  		if [Country] == "CN" {
			date {
				match => ["Osb_Timestamp",
					"EEE MMM dd H:mm:ss 'CST' yyyy"
				]
				timezone => "Asia/Hong_Kong"
			}
		} 
		else if [Country] == "US" or [Country] == "DEV" {
			date {
				match => ["Osb_Timestamp",
					"ISO8601"
				]
				timezone => "America/Chicago"
			}
		}
		if ("_grokparsefailure" in [tags]) {
			grok {
				match => { "message" => "(?m)%{GREEDYDATA:Osb_MessageText}" }
			}
		}
	}
}
